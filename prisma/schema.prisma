datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum role_enum {
  student
  manager
  admin
}

enum registration_status_enum {
  pending
  paid
  cancelled
}

enum consult_status_enum {
  pending
  in_progress
  done
}

enum consultation_type_enum {
  course
  study_abroad
  general
}

enum payment_reference_enum {
  ielts_exam
  ielts_mock_center
  ielts_mock_online
}

enum payment_status_enum {
  pending
  success
  failed
}

enum skill_enum {
  listening
  reading
  writing
  speaking
}

enum payment_method_enum {
  QR
  PayOS
  other
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model users {
  id          Int        @id @default(autoincrement())
  full_name   String?
  email       String?    @unique
  password    String?
  phone       String?
  address     String?
  gender      Gender?
  birth_date  DateTime?
  role        role_enum?
  reset_token String?
  created_at  DateTime?  @default(now())
  updated_at  DateTime?  @updatedAt

  ielts_exam_registrations           ielts_exam_registrations[]
  ielts_center_mock_registrations    ielts_center_mock_registrations[]
  payments                           Payment[]
  consultations                      consultations[]
  registrations                      Registration[]
}

model courses {
  id          Int       @id @default(autoincrement())
  name        String?
  description String?
  price       Decimal?
  is_online   Boolean?
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
}

model ielts_tests {
  id          Int       @id @default(autoincrement())
  name        String?
  description String?
  skill       skill_enum?
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt

  ielts_exam_registrations ielts_exam_registrations[]
}

model ielts_exam_registrations {
  id           Int                       @id @default(autoincrement())
  user_id      Int?
  test_id      Int?
  exam_date    DateTime?
  location     String?
  is_at_center Boolean?                  @default(false)
  status       registration_status_enum?
  created_at   DateTime?                 @default(now())
  updated_at   DateTime?                 @updatedAt

  users       users?       @relation(fields: [user_id], references: [id])
  ielts_tests ielts_tests? @relation(fields: [test_id], references: [id])

  ielts_skill_results ielts_skill_results[]
}

model ielts_skill_results {
  id              Int       @id @default(autoincrement())
  registration_id Int?
  score           Float?
  answer_detail   String?
  created_at      DateTime? @default(now())
  updated_at      DateTime? @updatedAt

  ielts_exam_registrations ielts_exam_registrations? @relation(fields: [registration_id], references: [id])
}

model ielts_mock_tests {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  type        String   @default("all")
  month       String?
  reading     Boolean  @default(false)
  listening   Boolean  @default(false)
  writing     Boolean  @default(false)
  speaking    Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  questions    ielts_mock_test_questions[]
  exam_results ielts_mock_results[]
}

model ielts_mock_test_questions {
  id             Int        @id @default(autoincrement())
  mock_test_id   Int
  skill          skill_enum
  part           Int?
  question_text  String
  options        String?
  correct_answer String?
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt

  ielts_mock_tests ielts_mock_tests @relation(fields: [mock_test_id], references: [id])
}

model ielts_mock_results {
  id              Int    @id @default(autoincrement())
  user_id         Int?
  mock_test_id    Int
  reading_score   Float?
  listening_score Float?
  writing_score   Float?
  speaking_score  Float?
  overall_score   Float?
  answer_detail   String?
  listening_audio_url String?
  speaking_audio_url  String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  ielts_mock_tests ielts_mock_tests @relation(fields: [mock_test_id], references: [id])
}

model ielts_center_mock_tests {
  id          Int         @id @default(autoincrement())
  name        String?
  description String?
  skill       skill_enum?
  created_at  DateTime?   @default(now())
  updated_at  DateTime?   @updatedAt

  ielts_center_mock_registrations ielts_center_mock_registrations[]
}

model ielts_center_mock_registrations {
  id                  Int                       @id @default(autoincrement())
  user_id             Int?
  center_mock_test_id Int?
  exam_date           DateTime?
  location            String?
  status              registration_status_enum?
  created_at          DateTime?                 @default(now())
  updated_at          DateTime?                 @updatedAt

  users                   users?                   @relation(fields: [user_id], references: [id])
  ielts_center_mock_tests ielts_center_mock_tests? @relation(fields: [center_mock_test_id], references: [id])

  ielts_center_mock_results ielts_center_mock_results[]
}

model ielts_center_mock_results {
  id              Int       @id @default(autoincrement())
  registration_id Int?
  score           Float?
  answer_detail   String?
  created_at      DateTime? @default(now())
  updated_at      DateTime? @updatedAt

  ielts_center_mock_registrations ielts_center_mock_registrations? @relation(fields: [registration_id], references: [id])
}

model Registration {
  id            Int               @id @default(autoincrement())
  userId        Int
  fullName      String
  dob           DateTime
  gender        Gender
  phone         String
  email         String
  cccd          String
  residence     String
  location      String
  format        String
  examType      String
  price         Decimal
  selectedDate  DateTime
  status        registration_status_enum @default(pending)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  user          users              @relation(fields: [userId], references: [id])
  payments      Payment[]
}

model Payment {
  id             Int                  @id @default(autoincrement())
  registration   Registration         @relation(fields: [registrationId], references: [id])
  registrationId Int
  user           users?               @relation(fields: [userId], references: [id])
  userId         Int?
  payosOrderId   String               @unique
  amount         Decimal
  status         payment_status_enum
  qrUrl          String?
  paymentMethod  payment_method_enum?
  paymentDate    DateTime?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model consultations {
  id                Int                     @id @default(autoincrement())
  user_id           Int?
  message           String?
  status            consult_status_enum?
  consultation_type consultation_type_enum?
  created_at        DateTime?               @default(now())
  updated_at        DateTime?               @updatedAt

  users users? @relation(fields: [user_id], references: [id])
}

model job_applications {
  id         Int       @id @default(autoincrement())
  full_name  String?
  email      String?
  phone      String?
  cv_url     String?
  message    String?
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
}
